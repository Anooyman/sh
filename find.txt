正则表达式：用于字符串的模式分隔、匹配、查找以及替换操作
重点在匹配（即模糊匹配）


通配符：用于文件名的匹配，完全匹配（即必须一模一样），对于文件操作的命令可以使用
*：表示匹配任意内容
？：表示匹配任意一个内容
[]：表示匹配括号内任意一个字符


正则表达式：用于匹配文件中的数据，包含匹配（包含即可以匹配成功），对于文件内容操作的命令可以使用
分为：基础正则表达式和扩展正则表达式
*：前一个字符匹重复0次，或者任意多次（单独使用没有任何作用）  例如："aa*"  会匹配到以一个a开头的所有内容
.：匹配除了换行符意外的任意一个字符    例如："a..b"  会匹配到所有的以a开头，b结尾，字符数为4的所有内容   "a.*b"  匹配以a开头，b结尾的所有行  ".*"  匹配所有行
^：匹配行首    例如："^a"  匹配以a开头的所有行
$：匹配行尾    例如："a$"  匹配以a结尾的所有行     "^$"  匹配空白行（利用-n参数显示行数）
[]：匹配括号内任意一个字符   例如："a[cde]b"   匹配a开头，b结尾，中间字符为cde其中任意一个字符的内容   "^[ab]"   匹配以a或者b开头的所有行
[^]：匹配除括号内字符意外的任意一个字符   例如："^[^a-z]"   匹配以非a-z开头的行
\：转义符   例如："\.$"  匹配以.结尾的行，而不是以任意字符结尾的行
\{n\}：匹配前一个字符恰好出现n次（第一个\表示转义）    例如："a\{\3}"   匹配a正好出现3次的行（注意：如果a连续出现3次以上，也会出现）
\{n,\}：匹配前一个字符不少于n次   例如："a\{3,\}"   匹配a出现3次以上的行
\{n,m\}：匹配前一个字符出现n到m次    例如："a\{1,3\}"   匹配a出现1次到3次的行
注意：最后3个正则表达式必须要有定界符来匹配才有用，不然没有什么区别 
例如：
[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}  用于匹配日期，格式为"YYYY-MM-DD"
[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}  用于匹配IP地址，格式为"255.255.255.255"  只是简单匹配，完全匹配一个IP是无法实现的



cut命令：内容截取，纵向截取（不能识别空格作为分隔符）
grep命令为横向截取


printf命令：格式化输出命令（最古老的输出，echo是进化版） （之后的print命令可以实现自动换行，比printf好用）
格式： printf 【'输出类型 输出格式'】【内容】
输出类型：
%ns:输出字符串，n代表n个字符（一般可以不加n）
%ni：输出整数
%m.nf：输出浮点数   例如：%8.2f  8为数，其中2为是小数
输出格式：
\a：输出警告音
\n：换行
\t：Tab键
\r：回车
\b：输出退格键
例如：printf %s 1 2 3 4    输出为1234



awk命令：内容截取命令（默认以Tab键（或者空格）作为分隔符，如果有固定的分隔符可以用cut命令，如果没有再使用awk命令）
格式：
awk '条件1{动作1}条件2{动作2}....' 【文件名】
条件：一般为条件表达式

动作：一般为输出，也可以为流程控制语句（初学者不需要掌握）

例如：df -h | awk '{print $1 "\t" $3}' 截取df命令查看后的第一和第三列
例如：df -h | awk 'BEGIN{print "abc:"}{print $1 "\t" $3}'  先输出“abc：”，之后再输出df查看的第一和第三列（如果是输入的END则是在最后输出）
例如：awk 'BEGIN{FS=":"}{print $1 "\t" $3}'   以":"作为分隔符取出第一和第二列
例如：awk '$3>=60{print $2}'  如果第三列的数字大于等于60则输出其第二列




sed命令：替换命令
格式：
sed 【选项】'【动作】' 【文件名】
常用选项：
-n：只输出改变了的行（默认输出全部文件）
-e：允许执行多条动作，用；隔开
-i：对文件直接操作（默认是显示在终端，但是不对文件进行操作，注意使用！！！）
动作：
a：追加
c：行替换
s：字符替换  格式："行范围s/旧字符串/新字符串/g"（和vim中相似）
i：插入
p：打印
d：删除
例如：sed -n '2p' 【文件名】  打印文件中第二行
例如：sed '2,4d' 【文件名】 删除第二行到第四行后打印文件（没有-i参数所以源文件不改变）
例如：sed '2a abc' 【文件名】  在第二行后面加入abc（即在第三行）
例如：sed '2i abc' 【文件名】  在第二行前面加入abc（即在第二行，原来的第二行变为了第三行）
例如：sed '2s/70/100/g' 【文件名】  将第二行的70替换为100
例如：sed -e 's/70/100/g;s/80/110/g' 【文件名】  将全文70换为100,80换为110




sort命令：
参数：
-f：忽略大小写
-t：指定分隔符
-k n，m：从第n个字段到第m个字段结尾，如果不加",m"则默认为到末尾
例如：sort -n -t ":"  -k "3,3" 【文件名】 将文件以：为分隔符，按第三个段的数字大小对文件进行排序
















